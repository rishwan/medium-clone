{"ast":null,"code":"import { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport connectedAuthWrapper from 'redux-auth-wrapper/connectedAuthWrapper';\nimport { routerActions } from 'react-router-redux';\nexport var UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: '/login',\n  redirectAction: routerActions.replace,\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user !== null;\n  },\n  wrapperDisplayName: 'UserIsAuthenticated',\n  predicate: function predicate(authData) {\n    return authData.isAuthenticated;\n  }\n});\nexport var VisibileOnlyAdmin = connectedAuthWrapper({\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user !== null && state.authReducer.user.type === 'admin';\n  },\n  wrapperDisplayName: 'VisibleOnlyAdmin'\n});\nexport var VisibleOnlyLogged = connectedAuthWrapper({\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user !== null;\n  },\n  wrapperDisplayName: 'VisibleOnlyLogged'\n});\nexport var isAdmin = connectedRouterRedirect({\n  redirectPath: '/login',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user !== null && state.authReducer.user.type === 'admin';\n  },\n  wrapperDisplayName: 'isAdmin'\n});\nexport var isGuest = connectedRouterRedirect({\n  redirectPath: '/login',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user === null;\n  },\n  wrapperDisplayName: 'isGuest'\n});\nexport var isLoggedIn = connectedRouterRedirect({\n  redirectPath: '/products',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.authReducer.user === null;\n  },\n  wrapperDisplayName: 'isLoggedIn'\n});","map":{"version":3,"sources":["/Applications/MAMP/htdocs/medium-clone/admin_panel/src/pages/components/UserIsAuthenticated.js"],"names":["connectedRouterRedirect","connectedAuthWrapper","routerActions","UserIsAuthenticated","redirectPath","redirectAction","replace","authenticatedSelector","state","authReducer","user","wrapperDisplayName","predicate","authData","isAuthenticated","VisibileOnlyAdmin","type","VisibleOnlyLogged","isAdmin","allowRedirectBack","isGuest","isLoggedIn"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,sCAAxC;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAO,IAAMC,mBAAmB,GAAGH,uBAAuB,CAAC;AACzDI,EAAAA,YAAY,EAAE,QAD2C;AAEzDC,EAAAA,cAAc,EAAEH,aAAa,CAACI,OAF2B;AAGzDC,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA/B;AAAA,GAH6B;AAIzDC,EAAAA,kBAAkB,EAAE,qBAJqC;AAKzDC,EAAAA,SAAS,EAAE,mBAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,eAAb;AAAA;AALsC,CAAD,CAAnD;AAQP,OAAO,IAAMC,iBAAiB,GAAGd,oBAAoB,CAAC;AACpDM,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA3B,IAAmCF,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuBM,IAAvB,KAAgC,OAAvE;AAAA,GADwB;AAEpDL,EAAAA,kBAAkB,EAAE;AAFgC,CAAD,CAA9C;AAKP,OAAO,IAAMM,iBAAiB,GAAGhB,oBAAoB,CAAC;AACpDM,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA/B;AAAA,GADwB;AAEpDC,EAAAA,kBAAkB,EAAE;AAFgC,CAAD,CAA9C;AAKP,OAAO,IAAMO,OAAO,GAAGlB,uBAAuB,CAAC;AAC7CI,EAAAA,YAAY,EAAE,QAD+B;AAE7Ce,EAAAA,iBAAiB,EAAE,KAF0B;AAG7Cd,EAAAA,cAAc,EAAEH,aAAa,CAACI,OAHe;AAI7CC,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA3B,IAAmCF,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuBM,IAAvB,KAAgC,OAAvE;AAAA,GAJiB;AAK7CL,EAAAA,kBAAkB,EAAE;AALyB,CAAD,CAAvC;AAQP,OAAO,IAAMS,OAAO,GAAGpB,uBAAuB,CAAC;AAC7CI,EAAAA,YAAY,EAAE,QAD+B;AAE7Ce,EAAAA,iBAAiB,EAAE,KAF0B;AAG7Cd,EAAAA,cAAc,EAAEH,aAAa,CAACI,OAHe;AAI7CC,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA/B;AAAA,GAJiB;AAK7CC,EAAAA,kBAAkB,EAAE;AALyB,CAAD,CAAvC;AAQP,OAAO,IAAMU,UAAU,GAAGrB,uBAAuB,CAAC;AAChDI,EAAAA,YAAY,EAAE,WADkC;AAEhDe,EAAAA,iBAAiB,EAAE,KAF6B;AAGhDd,EAAAA,cAAc,EAAEH,aAAa,CAACI,OAHkB;AAIhDC,EAAAA,qBAAqB,EAAE,+BAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,KAA2B,IAA/B;AAAA,GAJoB;AAKhDC,EAAAA,kBAAkB,EAAE;AAL4B,CAAD,CAA1C","sourcesContent":["import { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect'\nimport connectedAuthWrapper from 'redux-auth-wrapper/connectedAuthWrapper'\nimport { routerActions } from 'react-router-redux'\n\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: '/login',\n  redirectAction: routerActions.replace,\n  authenticatedSelector: state => state.authReducer.user !== null,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  predicate: authData => authData.isAuthenticated\n})\n\nexport const VisibileOnlyAdmin = connectedAuthWrapper({\n  authenticatedSelector: state => state.authReducer.user !== null && state.authReducer.user.type === 'admin',\n  wrapperDisplayName: 'VisibleOnlyAdmin'\n})\n\nexport const VisibleOnlyLogged = connectedAuthWrapper({\n  authenticatedSelector: state => state.authReducer.user !== null,\n  wrapperDisplayName: 'VisibleOnlyLogged'\n})\n\nexport const isAdmin = connectedRouterRedirect({\n  redirectPath: '/login',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: state => state.authReducer.user !== null && state.authReducer.user.type === 'admin',\n  wrapperDisplayName: 'isAdmin'\n})\n\nexport const isGuest = connectedRouterRedirect({\n  redirectPath: '/login',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: state => state.authReducer.user === null,\n  wrapperDisplayName: 'isGuest'\n})\n\nexport const isLoggedIn = connectedRouterRedirect({\n  redirectPath: '/products',\n  allowRedirectBack: false,\n  redirectAction: routerActions.replace,\n  authenticatedSelector: state => state.authReducer.user === null,\n  wrapperDisplayName: 'isLoggedIn'\n})"]},"metadata":{},"sourceType":"module"}